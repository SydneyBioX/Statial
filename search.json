[{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Statial","text":"","code":"# Install the package from Bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"Statial\")"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Statial","text":"","code":"# Loading required packages library(Statial) library(spicyR) library(ClassifyR) library(lisaClust) library(dplyr) library(SingleCellExperiment) library(ggplot2) library(ggsurvfit) library(survival) library(tibble)  theme_set(theme_classic()) nCores <- 1"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Statial","text":"37 trillion cells human body, taking different forms functions. behaviour cells can described canonical characteristics, functions can also dynamically change based environmental context, leading cells diverse states. Understanding changes cell state interplay cells key understanding mechanisms action contribute human disease. Statial suite functions identifying changes cell state. guide provide step--step overview key functions within Statial.","code":""},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"loading-example-data","dir":"Articles","previous_headings":"","what":"Loading example data","title":"Statial","text":"illustrate functionality Statial use multiplexed ion beam imaging time--flight (MIBI-TOF) dataset profiling tissue triple-negative breast cancer patients\\(^1\\) Keren et al., 2018. dataset simultaneously quantifies situ expression 36 proteins 34 immune rich patients. Note: data contains “uninformative” probes original cohort included 41 patients. images stored SingleCellExperiment object called kerenSCE. object contains 57811 cells across 10 images includes information cell type patient survival. Note: original dataset reduced 41 images 10 images purposes vignette, due size restrictions.","code":"# Load head and neck data data(\"kerenSCE\")  kerenSCE #> class: SingleCellExperiment  #> dim: 48 57811  #> metadata(0): #> assays(1): intensities #> rownames(48): Na Si ... Ta Au #> rowData names(0): #> colnames(57811): 1 2 ... 171281 171282 #> colData names(8): x y ... Survival_days_capped Censored #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"kontextual-identifying-discrete-changes-in-cell-state","dir":"Articles","previous_headings":"","what":"Kontextual: Identifying discrete changes in cell state","title":"Statial","text":"Kontextual method evaluate localisation relationship two cell types image. Kontextual builds L-function contextualising relationship two cell types reference typical spatial behaviour \\(3^{rd}\\) cell type/population. taking approach, Kontextual invariant changes window image well tissue structures may present. definitions cell types cell states somewhat ambiguous, cell types imply well defined groups cells serve different roles one another, hand cell states imply cells dynamic entity discretised, thus exist continuum. purposes using Kontextual treat cell states identified clusters cells, larger clusters represent “parent” cell population, finer sub-clusters representing “child” cell population. example CD4 T cell may considered child larger parent population Immune cells. Kontextual thus aims see child population cells deviate spatial behaviour parent population, influences localisation child cell state another cell state.","code":""},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"cell-type-hierarchy","dir":"Articles","previous_headings":"Kontextual: Identifying discrete changes in cell state","what":"Cell type hierarchy","title":"Statial","text":"key input Kontextual annotation cell type hierarchies. need organise cells present cell state populations clusters, e.g. different B cell types put vector called bcells. purposes vignette, manually defined. Alternatively, can use treeKor bioconductor package treekoR define hierarchies data driven way.","code":"# Examine all cell types in image unique(kerenSCE$cellType) #>  [1] \"Keratin_Tumour\" \"CD3_Cell\"       \"B\"              \"CD4_Cell\"       #>  [5] \"Dc/Mono\"        \"Unidentified\"   \"Macrophages\"    \"CD8_Cell\"       #>  [9] \"other immune\"   \"Endothelial\"    \"Mono/Neu\"       \"Mesenchymal\"    #> [13] \"Neutrophils\"    \"NK\"             \"Tumour\"         \"DC\"             #> [17] \"Tregs\"  # Set up cell populations tumour <- c(\"Keratin_Tumour\", \"Tumour\")  bcells <- c(\"B\") tcells <- c(\"CD3_Cell\", \"CD4_Cell\", \"CD8_Cell\", \"Tregs\") myeloid <- c(\"Dc/Mono\", \"DC\", \"Mono/Neu\", \"Macrophages\", \"Neutrophils\")  endothelial <- c(\"Endothelial\") mesenchymal <- c(\"Mesenchymal\")  tissue <- c(endothelial, mesenchymal) immune <- c(bcells, tcells, myeloid, \"NK\", \"other immune\") # NK = Natural Killer cells  all <- c(tumour, tissue, immune, \"Unidentified\")"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"discrete-cell-state-changes-within-a-single-image","dir":"Articles","previous_headings":"Kontextual: Identifying discrete changes in cell state","what":"Discrete cell state changes within a single image","title":"Statial","text":"examine image highlighted Keren et al. 2018 manuscript relationship two cell types depends parent cell population. image 6 Keren et al. dataset, can see p53+ tumour cells immune cells dispersed. However behaviour p53+ tumour cells placed context spatial behaviour broader parent population tumour cells, p53+ tumour cells immune appear localised.w  Kontextual accepts SingleCellExperiment object, single image, list images SingleCellExperiment object, gets passed cells argument. two cell types evaluated specified arguments. parent population must also specified parent argument, note parent cell population must include cell type. argument r specify radius cell relationship evaluated . Kontextual supports parallel processing, number cores can specified using cores argument. Kontextual can take single value multiple values argument test combinations arguments specified. can calculate relationships across images single radius. kontextCurve function plots L-function value Kontextual values range radii. points lie red line (expected pattern) localisation indicated radius, points lie red line dispersion indicated. seen following plot Kontextual able correctly identify localisation p53 Immune example image certain range radii. radius gets large overall relationship p53 Immune looks dispersed. original L-function able identify localisation value radii.  Alternatively pairwise cell relationships corresponding parent dataset can tested. data frame pairwise combinations can creating using parentCombinations function. function takes vector cells, well parent vectors set earlier. shown output data frame specifying , , parent arguments Kontextual.","code":"# Lets define a new cell type vector kerenSCE$cellTypeNew <- kerenSCE$cellType  # Select for all cells that express higher than baseline level of p53 p53Pos = assay(kerenSCE)[\"p53\",] > -0.300460  # Find p53+ tumour cells kerenSCE$cellTypeNew[kerenSCE$cellType %in% tumour] <- \"Tumour\" kerenSCE$cellTypeNew[p53Pos & kerenSCE$cellType %in% tumour] <- \"p53_Tumour\"  #Group all immune cells under the name \"Immune\"  kerenSCE$cellTypeNew[kerenSCE$cellType %in% immune] <- \"Immune\"  # Plot image 6  kerenSCE |>   colData() |>   as.data.frame() |>   filter(imageID == \"6\") |>   filter(cellTypeNew %in% c(\"Immune\", \"Tumour\", \"p53_Tumour\")) |>   arrange(cellTypeNew) |>   ggplot(aes(x = x, y = y, color = cellTypeNew)) +   geom_point(size = 1) +   scale_colour_manual(values = c(\"#505050\", \"#64BC46\",\"#D6D6D6\")) + guides(colour = guide_legend(title = \"Cell types\", override.aes = list(size=3))) p53_Kontextual <- Kontextual(   cells = kerenSCE,   r = 50,   from = \"p53_Tumour\",   to = \"Immune\",   parent = c(\"p53_Tumour\", \"Tumour\"),   cellType = \"cellTypeNew\" )  p53_Kontextual #>    imageID               test original kontextual  r weightQuantile inhom  edge #> 1        1 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 2       14 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 3       18 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 4       21 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 5       29 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 6        3 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 7       32 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 8       35 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 9        5 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #> 10       6 p53_Tumour__Immune       NA         NA 50            0.8  TRUE FALSE #>    includeZeroCells window window.length #> 1              TRUE convex            NA #> 2              TRUE convex            NA #> 3              TRUE convex            NA #> 4              TRUE convex            NA #> 5              TRUE convex            NA #> 6              TRUE convex            NA #> 7              TRUE convex            NA #> 8              TRUE convex            NA #> 9              TRUE convex            NA #> 10             TRUE convex            NA curves <- kontextCurve(   cells = kerenSCE,   from = \"p53_Tumour\",   to = \"Immune\",   parent = c(\"p53_Tumour\", \"Tumour\"),   rs = seq(10, 510, 100),   image = \"6\",   cellType = \"cellTypeNew\",   cores = nCores )  kontextPlot(curves) # Get all relationships between cell types and their parents parentDf <- parentCombinations(   all = all,   tumour,   bcells,   tcells,   myeloid,   endothelial,   mesenchymal,   tissue,   immune )"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"discrete-cell-state-changes-across-all-images","dir":"Articles","previous_headings":"Kontextual: Identifying discrete changes in cell state","what":"Discrete cell state changes across all images","title":"Statial","text":"Rather specifying , , parent Kontextual, output parentCombinations can inputed Kontextual using parentDf argument, examine pairwise relationships dataset. chunk take signficant amount time run, demonstration results saved loaded .","code":"# Running Kontextual on all relationships across all images. kerenKontextual <- Kontextual(   cells = kerenSCE,   parentDf = parentDf,   r = 50,   cores = nCores ) data(\"kerenKontextual\") bigDiff <- (kerenKontextual$original - kerenKontextual$kontextual) head(kerenKontextual[order(bigDiff),], 10) #>      imageID                                test   original kontextual  r #> 3393      18       CD3_Cell__Mesenchymal__tcells  42.540392  293.08841 50 #> 4499       5         Tumour__Endothelial__tumour -22.329210  181.64536 50 #> 4517      32                   Tumour__B__tumour  71.070831  244.33654 50 #> 4589       5            Tumour__Mono/Neu__tumour  -8.341033  126.48917 50 #> 4537      32            Tumour__CD4_Cell__tumour  37.890443  150.58312 50 #> 1288      35 Macrophages__Keratin_Tumour__immune -12.199943   92.73999 50 #> 3519       5      CD3_Cell__Unidentified__tcells -27.935002   73.33203 50 #> 4609       5        Tumour__other immune__tumour   9.069621  106.13098 50 #> 4509       5         Tumour__Mesenchymal__tumour  -3.104019   93.16538 50 #> 4539       5            Tumour__CD4_Cell__tumour -15.308151   69.23822 50 #>      weightQuantile inhom  edge includeZeroCells window window.length #> 3393            0.8  TRUE FALSE             TRUE convex            NA #> 4499            0.8  TRUE FALSE             TRUE convex            NA #> 4517            0.8  TRUE FALSE             TRUE convex            NA #> 4589            0.8  TRUE FALSE             TRUE convex            NA #> 4537            0.8  TRUE FALSE             TRUE convex            NA #> 1288            0.8  TRUE FALSE             TRUE convex            NA #> 3519            0.8  TRUE FALSE             TRUE convex            NA #> 4609            0.8  TRUE FALSE             TRUE convex            NA #> 4509            0.8  TRUE FALSE             TRUE convex            NA #> 4539            0.8  TRUE FALSE             TRUE convex            NA"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"associate-discrete-state-changes-with-survival-outcomes","dir":"Articles","previous_headings":"Kontextual: Identifying discrete changes in cell state","what":"Associate discrete state changes with survival outcomes","title":"Statial","text":"examine whether features obtained Statial associated patient outcomes groupings, can use colTest function SpicyR. understand survival outcomes differ significantly 2 patient groups, specify type = \"survival\" colTest. examine features associated patient survival using Kontextual values example. , survival data extracted kerenSCE converted survival object kerenSurv. addition , Kontextual results must converted data.frame wide matrix, can done using prepMatrix. Note, extract original L-function values, specify column = \"original\" prepMatrix. Finally, Kontextual matrix survival object passed colTest, type = \"survival\" obtain survival results. can see results Mesenchymal__Dc/Mono__mesenchymal significant pairwise relationship contributes patient survival. relationship Mesenchymal cells macrophage cells, relative parent population tissue cells. can see negative coefficient associated relationship, tells us decrease localisation Mesenchymal Macrophages leads poorer survival outcomes patients. association Mesenchymal__Dc/Mono__mesenchymal survival can also visualised Kaplan-Meier curve. must first extract Kontextual values relationship across images. Next determine Mesenchymal Macrophages relatively attracted avoiding image, comparing Kontextual value image median Kontextual value. Finally plot Kaplan-Meier curve using ggsurvfit package. shown , Mesenchymal Macrophages relatively dispersed one another, patients tend worse survival outcomes.","code":"# Extracting survival data survData = kerenSCE |>     colData() |>      data.frame() |>      select(imageID, Survival_days_capped, Censored) |>      unique()  # Creating survival vector kerenSurv = Surv(survData$Survival_days_capped, survData$Censored) names(kerenSurv) = survData$imageID # Converting Kontextual result into data matrix kontextMat = prepMatrix(kerenKontextual)  # Ensuring rownames of kontextMat match up with rownames of the survival vector  kontextMat = kontextMat[names(kerenSurv), ]  # Replace NAs with 0 kontextMat[is.na(kontextMat )] <- 0 # Running survival analysis survivalResults = spicyR::colTest(kontextMat, kerenSurv, type = \"survival\")   head(survivalResults) #>                                      coef se.coef   pval adjPval #> Mesenchymal__Dc/Mono__mesenchymal   1.100   0.330 0.0012    0.56 #> Mesenchymal__other immune__tissue   0.096   0.048 0.0440    0.62 #> other immune__Endothelial__myeloid  0.047   0.024 0.0490    0.62 #> CD4_Cell__Neutrophils__immune       0.110   0.055 0.0500    0.62 #> CD4_Cell__CD8_Cell__tcells          0.580   0.300 0.0500    0.62 #> CD4_Cell__Keratin_Tumour__immune   -0.150   0.075 0.0510    0.62 #>                                                               cluster #> Mesenchymal__Dc/Mono__mesenchymal   Mesenchymal__Dc/Mono__mesenchymal #> Mesenchymal__other immune__tissue   Mesenchymal__other immune__tissue #> other immune__Endothelial__myeloid other immune__Endothelial__myeloid #> CD4_Cell__Neutrophils__immune           CD4_Cell__Neutrophils__immune #> CD4_Cell__CD8_Cell__tcells                 CD4_Cell__CD8_Cell__tcells #> CD4_Cell__Keratin_Tumour__immune     CD4_Cell__Keratin_Tumour__immune # Selecting most significant relationship survRelationship = kontextMat[[\"Mesenchymal__Dc/Mono__mesenchymal\"]] survRelationship = ifelse(survRelationship > median(survRelationship), \"Localised\", \"Dispersed\")      # Plotting Kaplan-Meier curve survfit2(kerenSurv ~ survRelationship) |>     ggsurvfit() +     add_pvalue() +     ggtitle(\"Mesenchymal__Dc/Mono__mesenchymal\")"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"spatiomark-identifying-continuous-changes-in-cell-state","dir":"Articles","previous_headings":"","what":"SpatioMark: Identifying continuous changes in cell state","title":"Statial","text":"Changes cell states can analytically framed change abundance gene protein within particular cell type. can use marker expression identify quantify evidence cell interactions catalyse cell state changes. approach measures protein markers cell change spatial proximity abundance cell types. methods utilised thereby provide framework explore dynamic behaviour cells altered agents surrounded .","code":""},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"continuous-cell-state-changes-within-a-single-image","dir":"Articles","previous_headings":"SpatioMark: Identifying continuous changes in cell state","what":"Continuous cell state changes within a single image","title":"Statial","text":"first step analysing changes calculate spatial proximity (getDistances) abundance (getAbundances) cell every cell type. values stored reducedDims slot SingleCellExperiment object names distances abundances respectively. First, let’s examine effect observed earlier Kontextual - localisation p53-positive keratin/tumour cells macrophages context total keratin/tumour cells image 6 Keren et al. dataset. Statial provides two main functions assess relationship - calcStateChanges plotStateChanges. can use calcStateChanges examine relationship 2 cell types 1 marker specific image. case, ’re examining relationship keratin/tumour cells (= Keratin_Tumour) macrophages (= \"Macrophages\") marker p53 (marker = \"p53\") image = \"6\". can appreciate fdr statistic relationship significant, negative tvalue, indicating expression p53 keratin/tumour cells decreases distance macrophages increases. Statial also provides convenient function visualising interaction - plotStateChanges. , can specify image = 6 main cell types interest, keratin/tumour cells macrophages, marker p53, format calcStateChanges. analysis, can observe keratin/tumour cells closer group macrophages tend higher expression p53, observed first graph. relationship quantified second graph, showing overall decrease p53 expression keratin/tumour cells distance macrophages increase. results allow us essentially arrive result Kontextual, calculated localisation p53+ keratin/tumour cells macrophages wider context keratin/tumour cells.  ## Continuous cell state changes across images Beyond looking single cell--cell interactions single image, can also look interactions across images. calcStateChanges function provided Statial can expanded exact purpose - specifying cell types, marker, image, calcStateChanges examine significant correlations distance marker expression across entire dataset. , ’ve filtered significant interactions include found within image 6 Keren et al. dataset. image 6, majority top 10 significant interactions occur keratin/tumour cells immune population, many interactions appear involve HLA class ligand. can examine interactions plotStateChanges function. Taking closer examination relationship macrophages keratin/tumour HLA class expression, plot shows us clear visual correlation - macrophage density increases, keratin/tumour cells increase expression HLA class . Biologically, HLA Class ligand exists nucleated cells, tasked presenting internal cell antigens recognition immune system, marking aberrant cells destruction either CD8+ T cells NK cells.   Next, let’s take look top 10 significant results across images. Immediately, can appreciate couple interactions biologically plausible. One significant interactions occurs B cells CD4 T cells image 35, CD4 T cells found increase CD20 expression close proximity B cells. Biologically, CD20 highly specific ligand B cells, healthy circumstances usually expressed T cells. potentially artefact calcStateChanges? can examine image plotStateChanges function, indeed observe strong increase CD20 expression T cells nearby B cell populations.   T cells expressing CD20? brings us key problem cell segmentation - contamination.","code":"kerenSCE <- getDistances(kerenSCE,                     maxDist = 200,                     nCores = 1)  kerenSCE <- getAbundances(kerenSCE,                      r = 200,                      nCores = 1) stateChanges <- calcStateChanges(   cells = kerenSCE,   type = \"distances\",   image = \"6\",   from = \"Keratin_Tumour\",   to = \"Macrophages\",   marker = \"p53\",   nCores = 1)  stateChanges #>   imageID primaryCellType otherCellType marker         coef      tval #> 1       6  Keratin_Tumour   Macrophages    p53 -0.001402178 -7.010113 #>           pval          fdr #> 1 2.868257e-12 2.868257e-12 p <- plotStateChanges(   cells = kerenSCE,   type = \"distances\",   image = \"6\",   from = \"Keratin_Tumour\",   to = \"Macrophages\",   marker = \"p53\",   size = 1,   shape = 19,   interactive = FALSE,   plotModelFit = FALSE,   method = \"lm\")  p #> $image #>  #> $scatter stateChanges <- calcStateChanges(   cells = kerenSCE,   type = \"distances\",   nCores = 1,   minCells = 100)  stateChanges |>    filter(imageID == 6) |>   head(n = 10) #>    imageID primaryCellType otherCellType       marker         coef      tval #> 1        6  Keratin_Tumour  Unidentified           Na  0.004218419  25.03039 #> 2        6  Keratin_Tumour   Macrophages  HLA_Class_1 -0.003823497 -24.69629 #> 3        6  Keratin_Tumour      CD4_Cell  HLA_Class_1 -0.003582774 -23.87797 #> 4        6  Keratin_Tumour  Unidentified Beta.catenin  0.005893120  23.41953 #> 5        6  Keratin_Tumour      CD8_Cell  HLA_Class_1 -0.003154544 -23.13804 #> 6        6  Keratin_Tumour       Dc/Mono  HLA_Class_1 -0.003353834 -22.98944 #> 7        6  Keratin_Tumour      CD3_Cell  HLA_Class_1 -0.003123446 -22.63197 #> 8        6  Keratin_Tumour        Tumour  HLA_Class_1  0.003684079  21.94265 #> 9        6  Keratin_Tumour      CD4_Cell           Fe -0.003457338 -21.43550 #> 10       6  Keratin_Tumour      CD4_Cell   phospho.S6 -0.002892457 -20.50767 #>             pval           fdr #> 1  6.971648e-127 1.176442e-123 #> 2  7.814253e-124 1.236215e-120 #> 3  1.745242e-116 2.208779e-113 #> 4  1.917245e-112 2.257178e-109 #> 5  5.444541e-110 5.991836e-107 #> 6  1.053130e-108 1.110701e-105 #> 7  1.237988e-105 1.205229e-102 #> 8  8.188258e-100  7.025803e-97 #> 9   1.287478e-95  9.727951e-93 #> 10  3.928912e-88  2.583081e-85 p <- plotStateChanges(   cells = kerenSCE,   type = \"distances\",   image = \"6\",   from = \"Keratin_Tumour\",   to = \"Macrophages\",   marker = \"HLA_Class_1\",   size = 1,   shape = 19,   interactive = FALSE,   plotModelFit = FALSE,   method = \"lm\")  p #> $image #>  #> $scatter stateChanges |> head(n = 10) #>      imageID primaryCellType otherCellType     marker         coef      tval #> 8674      35        CD4_Cell             B       CD20 -0.029185750 -40.57355 #> 8770      35        CD4_Cell       Dc/Mono       CD20  0.019125946  40.53436 #> 1819      35               B       Dc/Mono phospho.S6  0.005282065  40.41385 #> 8779      35        CD4_Cell       Dc/Mono phospho.S6  0.004033218  34.72882 #> 1813      35               B       Dc/Mono     HLA.DR  0.011120703  34.15344 #> 1971      35               B  other immune          P  0.011182182  34.14375 #> 8626      35        CD4_Cell      CD3_Cell       CD20  0.016349492  33.91901 #> 1816      35               B       Dc/Mono     H3K9ac  0.005096632  33.99856 #> 2011      35               B  other immune phospho.S6  0.005986586  33.66466 #> 1818      35               B       Dc/Mono   H3K27me3  0.006980810  33.22740 #>               pval           fdr #> 8674 7.019343e-282 3.553472e-277 #> 8770 1.891267e-281 4.787176e-277 #> 1819 5.306590e-278 8.954694e-274 #> 8779 4.519947e-219 5.720445e-215 #> 1813 8.401034e-212 8.505879e-208 #> 1971 1.056403e-211 8.913225e-208 #> 8626 1.219488e-210 8.819335e-207 #> 1816 3.266533e-210 2.067062e-206 #> 2011 8.545691e-207 4.806856e-203 #> 1818 2.438769e-202 1.234603e-198 p <- plotStateChanges(   cells = kerenSCE,   type = \"distances\",   image = \"35\",   from = \"CD4_Cell\",   to = \"B\",   marker = \"CD20\",   size = 1,   shape = 19,   interactive = FALSE,   plotModelFit = FALSE,   method = \"lm\")  p #> $image #>  #> $scatter"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"contamination-lateral-marker-spill-over","dir":"Articles","previous_headings":"","what":"Contamination (Lateral marker spill over)","title":"Statial","text":"Contamination, lateral marker spill issue results cell’s marker expressions wrongly attributed another adjacent cell. issue arises incorrect segmentation components one cell wrongly determined belonging another cell. Alternatively, issue can arise antibodies used tag measure marker expressions don’t latch properly cell interest, thereby resulting residual markers wrongly assigned belonging cell near intended target cell. important either correct account incorrect attribution markers modelling process. critical understanding whether significant cell-cell interactions detected artefact technical measurement errors driven spill real biological changes represent shift cell’s state. circumvent problem, Statial provides function predicts probability cell particular cell type - calcContamination. calcContamination returns dataframe probabilities demarcating chance cell particular cell type. dataframe stored contaminations reducedDim slot SingleCellExperiment object. also provides rfMainCellProb column, provides probability cell indeed cell type designated. E.g. cell designated CD8, rfMainCellProb give 80% chance cell indeed CD8, due contamination. can introduce probabilities covariates linear model setting contamination = TRUE parameter calcStateChanges function. However, perfect solution issue contamination. can see, despite factoring contamination linear model, correlation B cell density CD20 expression CD4 T cells remains one significant interactions model. However, mean factoring contamination linear model ineffective. Whilst correction attempts rectify every relationship arises due contamination, show significant portion relationships rectified. can show plotting ROC curve true positives false positives. general, cell type specific markers CD4, CD8, CD20 change cells specific . Therefore, relationships detected significant involving cell type markers likely false positives treated purposes evaluation. Meanwhile, cell state markers predominantly likely true positives. Plotting relationship false positives true positives, ’d expect contamination correction greatest relationships top 100 lowest p values, indeed see true positives false positives contamination correction.  , zoom ROC curve top 100 lowest p values occur, indeed see true positives false positives contamination correction.","code":"kerenSCE <- calcContamination(kerenSCE)  stateChangesCorrected <- calcStateChanges(   cells = kerenSCE,   type = \"distances\",   nCores = 1,   minCells = 100,   contamination = TRUE)  stateChangesCorrected |> head(n = 20) #>       imageID primaryCellType otherCellType      marker         coef      tval #> 8674       35        CD4_Cell             B        CD20 -0.024786419 -34.95527 #> 8770       35        CD4_Cell       Dc/Mono        CD20  0.015872636  33.46048 #> 8779       35        CD4_Cell       Dc/Mono  phospho.S6  0.003580507  29.44495 #> 1819       35               B       Dc/Mono  phospho.S6  0.004240940  29.40981 #> 8626       35        CD4_Cell      CD3_Cell        CD20  0.013479231  29.16784 #> 8629       35        CD4_Cell      CD3_Cell      HLA.DR  0.010217422  28.71325 #> 29188       3  Keratin_Tumour            DC          Ca -0.013671664 -28.87189 #> 1669       35               B      CD3_Cell      HLA.DR  0.008906451  25.52653 #> 27641      21  Keratin_Tumour            DC Pan.Keratin -0.006003833 -24.85754 #> 1813       35               B       Dc/Mono      HLA.DR  0.008809238  25.09780 #> 8763       35        CD4_Cell       Dc/Mono      CSF.1R  0.008552018  24.88996 #> 31825       6  Keratin_Tumour  Unidentified          Na  0.004216952  24.62453 #> 8635       35        CD4_Cell      CD3_Cell  phospho.S6  0.002914333  24.55304 #> 2011       35               B  other immune  phospho.S6  0.004495837  24.04748 #> 1675       35               B      CD3_Cell  phospho.S6  0.003565036  23.67518 #> 31918       6  Keratin_Tumour   Macrophages HLA_Class_1 -0.003441291 -22.78547 #> 1816       35               B       Dc/Mono      H3K9ac  0.003725499  22.92998 #> 2008       35               B  other immune      H3K9ac  0.004607261  22.81682 #> 31774       6  Keratin_Tumour      CD4_Cell HLA_Class_1 -0.003277158 -22.54297 #> 29186       3  Keratin_Tumour            DC          Si -0.005542163 -22.94915 #>                pval           fdr #> 8674  3.141399e-221 1.590302e-216 #> 8770  1.023792e-205 2.591422e-201 #> 8779  1.532688e-165 2.586360e-161 #> 1819  2.069706e-164 2.619420e-160 #> 8626  7.336926e-163 7.428491e-159 #> 8629  1.711503e-158 1.444052e-154 #> 29188 5.168071e-156 3.737549e-152 #> 1669  1.802832e-128 1.140832e-124 #> 27641 2.879473e-128 1.619671e-124 #> 1813  1.107925e-124 5.608757e-121 #> 8763  2.627293e-123 1.209128e-119 #> 31825 3.892314e-123 1.642037e-119 #> 8635  2.371224e-120 9.233913e-117 #> 2011  1.440258e-115 5.207974e-112 #> 1675  2.138478e-112 7.217220e-109 #> 31918 6.507296e-107 2.058908e-103 #> 1816  3.819083e-106 1.137278e-102 #> 2008  3.310591e-105 9.310853e-102 #> 31774 7.675714e-105 2.045134e-101 #> 29186 8.200541e-105 2.075721e-101 cellTypeMarkers <- c(\"CD3\", \"CD4\", \"CD8\", \"CD56\", \"CD11c\", \"CD68\", \"CD45\", \"CD20\")  values = c(\"blue\", \"red\") names(values) <- c(\"None\", \"Corrected\")  df <- rbind(data.frame(TP =cumsum(stateChanges$marker %in% cellTypeMarkers), FP = cumsum(!stateChanges$marker %in% cellTypeMarkers), type = \"None\"),             data.frame(TP =cumsum(stateChangesCorrected$marker %in% cellTypeMarkers), FP = cumsum(!stateChangesCorrected$marker %in% cellTypeMarkers), type = \"Corrected\"))  ggplot(df, aes(x = TP, y = FP, colour = type)) + geom_line()+ labs(y = \"Cell state marker\", x = \"Cell type marker\") + scale_colour_manual(values = values) ggplot(df, aes(x = TP, y = FP, colour = type)) + geom_line()+ xlim(0,100) + ylim(0,1000)+ labs(y = \"Cell state marker\", x = \"Cell type marker\") + scale_colour_manual(values = values)"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"associate-continuous-state-changes-with-survival-outcomes","dir":"Articles","previous_headings":"Contamination (Lateral marker spill over)","what":"Associate continuous state changes with survival outcomes","title":"Statial","text":"Similiar Kontextual, can run similar survival analysis using state changes results. , prepMatrix extracts coefficients, coef column stateChanges default. use t values instead, specify column = \"tval\" prepMatrix function. state changes results, Keratin_Tumour__CD4_Cell__Keratin6 significant pairwise relationship contributes patient survival. , relationship HLA class expression keratin/tumour cells spatial proximity mesenchymal cells. negative coeffcient associated relationship, tells us higher HLA class expression keratin/tumour cells nearby mesenchymal cell populations lead poorer survival outcomes patients.","code":"# Preparing features for Statial stateMat <- prepMatrix(stateChanges)  # Ensuring rownames of stateMat match up with rownames of the survival vector stateMat <- stateMat[names(kerenSurv), ]  # Remove some very small values stateMat <- stateMat[,colMeans(abs(stateMat)>0.0001)>.8]  survivalResults <- colTest(stateMat, kerenSurv, type = \"survival\")  head(survivalResults) #>                                       coef se.coef  pval adjPval #> Keratin_Tumour__Keratin_Tumour__EGFR  -390     190 0.037    0.74 #> Macrophages__Mesenchymal__H3K9ac     -1400     690 0.038    0.74 #> Macrophages__CD8_Cell__CD45           -880     440 0.045    0.74 #> Macrophages__CD8_Cell__IDO           -1500     790 0.050    0.74 #> Macrophages__Mesenchymal__IDO          580     300 0.051    0.74 #> Keratin_Tumour__CD4_Cell__Keratin6    1600     830 0.051    0.74 #>                                                                   cluster #> Keratin_Tumour__Keratin_Tumour__EGFR Keratin_Tumour__Keratin_Tumour__EGFR #> Macrophages__Mesenchymal__H3K9ac         Macrophages__Mesenchymal__H3K9ac #> Macrophages__CD8_Cell__CD45                   Macrophages__CD8_Cell__CD45 #> Macrophages__CD8_Cell__IDO                     Macrophages__CD8_Cell__IDO #> Macrophages__Mesenchymal__IDO               Macrophages__Mesenchymal__IDO #> Keratin_Tumour__CD4_Cell__Keratin6     Keratin_Tumour__CD4_Cell__Keratin6 # Selecting the most significant relationship survRelationship = stateMat[[\"Keratin_Tumour__CD4_Cell__Keratin6\"]] survRelationship = ifelse(survRelationship > median(survRelationship), \"Higher expression in close cells\", \"Lower expression in close cells\")      # Plotting Kaplan-Meier curve survfit2(kerenSurv ~ survRelationship) |>     ggsurvfit() +     add_pvalue() +     ggtitle(\"Keratin_Tumour__CD4_Cell__Keratin6\")"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"region-analysis-using-lisaclust","dir":"Articles","previous_headings":"","what":"Region analysis using lisaClust","title":"Statial","text":"Next can cluster areas similar spatial interactions identify regions using lisaClust. set k = 5 identify 5 regions. regions identified licaClust can visualised using hatchingPlot function.","code":"set.seed(51773)  # Preparing features for lisaClust kerenSCE <- lisaClust::lisaClust(kerenSCE, k = 5) # Use hatching to visualise regions and cell types. lisaClust::hatchingPlot(kerenSCE,   useImages = \"5\",   line.spacing = 41, # spacing of lines   nbp = 100 # smoothness of lines )"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"marker-means","dir":"Articles","previous_headings":"","what":"Marker Means","title":"Statial","text":"Statial provides functionality identify average marker expression given cell type given region, using getMarkerMeans function. Similar analysis , features can also used survival analysis.","code":"cellTypeRegionMeans <- getMarkerMeans(kerenSCE,                               imageID = \"imageID\",                               cellType = \"cellType\",                               region = \"region\")  survivalResults = colTest(cellTypeRegionMeans[names(kerenSurv),], kerenSurv, type = \"survival\")  head(survivalResults) #>                               coef se.coef    pval adjPval #> PD.L1__CD3_Cell__region_1     2000    85.0 0.0e+00  0.0000 #> CD31__CD8_Cell__region_3       190     5.4 0.0e+00  0.0000 #> IDO__Keratin_Tumour__region_5   20     2.0 0.0e+00  0.0000 #> IDO__Macrophages__region_5      47    10.0 2.5e-06  0.0024 #> CD138__B__region_5            -180    70.0 1.0e-02  0.8100 #> HLA_Class_1__B__region_5        33    13.0 1.2e-02  0.8100 #>                                                     cluster #> PD.L1__CD3_Cell__region_1         PD.L1__CD3_Cell__region_1 #> CD31__CD8_Cell__region_3           CD31__CD8_Cell__region_3 #> IDO__Keratin_Tumour__region_5 IDO__Keratin_Tumour__region_5 #> IDO__Macrophages__region_5       IDO__Macrophages__region_5 #> CD138__B__region_5                       CD138__B__region_5 #> HLA_Class_1__B__region_5           HLA_Class_1__B__region_5"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"patient-classification","dir":"Articles","previous_headings":"","what":"Patient classification","title":"Statial","text":"Finally demonstrate can use ClassifyR perform patient classification features generated Statial. addition kontextual, state changes, marker means values, also calculate cell type proportions region proportions using getProp function spicyR. perform 3 fold cross validation 10 repeats, using CoxPH model survival classification, feature selection also performed selecting top 10 features per fold using CoxPH model. , use performancePlot function assess C-index repeat 3-fold cross-validation. can see resulting C-indexes variable due dataset containing 10 images.","code":"# Calculate cell type and region proportions cellTypeProp <- getProp(kerenSCE,                         feature = \"cellType\",                        imageID = \"imageID\") regionProp <- getProp(kerenSCE,                         feature = \"region\",                        imageID = \"imageID\")  # Combine all the features into a list for classification  featureList <- list(states = stateMat,                       kontextual = kontextMat,                      regionMarkerMeans = cellTypeRegionMeans,                      cellTypeProp = cellTypeProp,                      regionProp = regionProp                     )  # Ensure the rownames of the features match the order of the survival vector featureList <- lapply(featureList, function(x)x[names(kerenSurv),])   set.seed(51773)  kerenCV = crossValidate(   measurements = featureList,   outcome = kerenSurv,   classifier = \"CoxPH\",   selectionMethod  = \"CoxPH\",   nFolds = 5,   nFeatures = 10,   nRepeats = 20,   nCores = 1   ) # Calculate AUC for each cross-validation repeat and plot. performancePlot(kerenCV,   characteristicsList = list(x = \"Assay Name\")   ) +    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))"},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Statial","text":"Keren, L., Bosse, M., Marquez, D., Angoshtari, R., Jain, S., Varma, S., Yang, S. R., Kurian, ., Van Valen, D., West, R., Bendall, S. C., & Angelo, M. (2018). Structured Tumor-Immune Microenvironment Triple Negative Breast Cancer Revealed Multiplexed Ion Beam Imaging. Cell, 174(6), 1373-1387.e1319. (DOI)","code":""},{"path":"https://sydneybiox.github.io/Statial/articles/Statial.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo","title":"Statial","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: EndeavourOS #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0  #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     #>  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    #>  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Australia/Sydney #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] tibble_3.2.1                ggsurvfit_0.3.1             #>  [3] ggplot2_3.4.4               SingleCellExperiment_1.22.0 #>  [5] dplyr_1.1.3                 lisaClust_1.8.1             #>  [7] ClassifyR_3.4.11            survival_3.5-7              #>  [9] BiocParallel_1.34.2         MultiAssayExperiment_1.26.0 #> [11] SummarizedExperiment_1.30.2 Biobase_2.60.0              #> [13] GenomicRanges_1.52.1        GenomeInfoDb_1.36.4         #> [15] IRanges_2.34.1              MatrixGenerics_1.12.3       #> [17] matrixStats_1.0.0           S4Vectors_0.38.2            #> [19] BiocGenerics_0.46.0         generics_0.1.3              #> [21] spicyR_1.12.2               Statial_1.2.4               #> [23] BiocStyle_2.28.1            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3        jsonlite_1.8.7            #>   [3] magrittr_2.0.3            spatstat.utils_3.0-3      #>   [5] magick_2.7.5              nloptr_2.0.3              #>   [7] farver_2.1.1              rmarkdown_2.24            #>   [9] fs_1.6.3                  zlibbioc_1.46.0           #>  [11] ragg_1.2.5                vctrs_0.6.4               #>  [13] spatstat.explore_3.2-3    memoise_2.0.1             #>  [15] minqa_1.2.6               DelayedMatrixStats_1.22.6 #>  [17] RCurl_1.98-1.12           rstatix_0.7.2             #>  [19] htmltools_0.5.6           S4Arrays_1.0.6            #>  [21] curl_5.0.2                broom_1.0.5               #>  [23] Rhdf5lib_1.22.1           rhdf5_2.44.0              #>  [25] sass_0.4.7                bslib_0.5.1               #>  [27] htmlwidgets_1.6.2         desc_1.4.2                #>  [29] plyr_1.8.9                plotly_4.10.2             #>  [31] cachem_1.0.8              lifecycle_1.0.3           #>  [33] pkgconfig_2.0.3           Matrix_1.6-1              #>  [35] R6_2.5.1                  fastmap_1.1.1             #>  [37] GenomeInfoDbData_1.2.10   numDeriv_2016.8-1.1       #>  [39] digest_0.6.33             colorspace_2.1-0          #>  [41] tensor_1.5                rprojroot_2.0.3           #>  [43] dqrng_0.3.1               textshaping_0.3.6         #>  [45] ggpubr_0.6.0              beachmat_2.16.0           #>  [47] labeling_0.4.3            spatstat.sparse_3.0-2     #>  [49] fansi_1.0.5               mgcv_1.8-42               #>  [51] httr_1.4.7                polyclip_1.10-4           #>  [53] abind_1.4-5               compiler_4.3.1            #>  [55] withr_2.5.1               backports_1.4.1           #>  [57] carData_3.0-5             HDF5Array_1.28.1          #>  [59] ggforce_0.4.1             R.utils_2.12.2            #>  [61] ggsignif_0.6.4            MASS_7.3-60               #>  [63] concaveman_1.1.0          DelayedArray_0.26.7       #>  [65] rjson_0.2.21              tools_4.3.1               #>  [67] ranger_0.15.1             goftest_1.2-3             #>  [69] R.oo_1.25.0               glue_1.6.2                #>  [71] nlme_3.1-162              rhdf5filters_1.12.1       #>  [73] grid_4.3.1                reshape2_1.4.4            #>  [75] gtable_0.3.4              spatstat.data_3.0-1       #>  [77] class_7.3-22              R.methodsS3_1.8.2         #>  [79] tidyr_1.3.0               data.table_1.14.8         #>  [81] car_3.1-2                 utf8_1.2.4                #>  [83] XVector_0.40.0            spatstat.geom_3.2-5       #>  [85] pillar_1.9.0              stringr_1.5.0             #>  [87] limma_3.56.2              splines_4.3.1             #>  [89] tweenr_2.0.2              lattice_0.21-8            #>  [91] deldir_1.0-9              tidyselect_1.2.0          #>  [93] locfit_1.5-9.8            scuttle_1.10.3            #>  [95] knitr_1.44                V8_4.3.3                  #>  [97] bookdown_0.35             edgeR_3.42.4              #>  [99] xfun_0.40                 DropletUtils_1.20.0       #> [101] pheatmap_1.0.12           fftwtools_0.9-11          #> [103] scam_1.2-14               stringi_1.7.12            #> [105] lazyeval_0.2.2            yaml_2.3.7                #> [107] boot_1.3-28.1             evaluate_0.21             #> [109] codetools_0.2-19          BiocManager_1.30.22       #> [111] cli_3.6.1                 systemfonts_1.0.4         #> [113] munsell_0.5.0             jquerylib_0.1.4           #> [115] Rcpp_1.0.11               spatstat.random_3.1-6     #> [117] parallel_4.3.1            pkgdown_2.0.7             #> [119] sparseMatrixStats_1.12.2  bitops_1.0-7              #> [121] lme4_1.1-34               SpatialExperiment_1.10.0  #> [123] viridisLite_0.4.2         lmerTest_3.1-3            #> [125] scales_1.2.1              purrr_1.0.2               #> [127] crayon_1.5.2              rlang_1.1.1"},{"path":"https://sydneybiox.github.io/Statial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Farhan Ameen. Author, maintainer. Sourish Iyengar. Author. Shila Ghazanfar. Author. Ellis Patrick. Author.","code":""},{"path":"https://sydneybiox.github.io/Statial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ameen F, Iyengar S, Ghazanfar S, Patrick E (2023). Statial: package identify changes cell state relative spatial associations. https://sydneybiox.github.io/Statial https://github.com/SydneyBioX/Statial/issues.","code":"@Manual{,   title = {Statial: A package to identify changes in cell state relative to spatial associations},   author = {Farhan Ameen and Sourish Iyengar and Shila Ghazanfar and Ellis Patrick},   year = {2023},   note = {https://sydneybiox.github.io/Statial https://github.com/SydneyBioX/Statial/issues}, }"},{"path":[]},{"path":"https://sydneybiox.github.io/Statial/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A package to identify changes in cell state relative to spatial associations","text":"Statial suite functions identifying changes cell state. functionality provided Statial provides robust quantification cell type localisation invariant changes tissue structure. addition Statial uncovers changes marker expression associated varying levels localisation. features can used explore structure function different cell types may altered agents surrounded .","code":""},{"path":"https://sydneybiox.github.io/Statial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package to identify changes in cell state relative to spatial associations","text":"Installing package Bioconductor. Otherwise, install development version GitHub.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"Statial\") # Install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"SydneyBioX/Statial\") library(Statial)"},{"path":"https://sydneybiox.github.io/Statial/index.html","id":"submitting-an-issue-or-feature-request","dir":"","previous_headings":"Installation","what":"Submitting an issue or feature request","title":"A package to identify changes in cell state relative to spatial associations","text":"Statial still active development. greatly appreciate feedback related package. R package related issues raised . general questions feedback, please contact us directly via ellis.patrick@sydney.edu.au.","code":""},{"path":"https://sydneybiox.github.io/Statial/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"A package to identify changes in cell state relative to spatial associations","text":"Farhan Ameen Sourish Iyengar Shila Ghazanfar - @shazanfar Ellis Patrick - @TheEllisPatrick","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/Kontextual.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","title":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","text":"Kontextual identifies relationship two cell types  conditional spatial behaviour 3rd cell population,  particular radius (r).","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/Kontextual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","text":"","code":"Kontextual(   cells,   r,   parentDf = NULL,   from = NULL,   to = NULL,   parent = NULL,   image = NULL,   inhom = FALSE,   edgeCorrect = TRUE,   window = \"convex\",   window.length = NA,   weightQuantile = 0.8,   includeZeroCells = TRUE,   includeOriginal = TRUE,   spatialCoords = c(\"x\", \"y\"),   cellType = \"cellType\",   imageID = \"imageID\",   cores = 1 )"},{"path":"https://sydneybiox.github.io/Statial/reference/Kontextual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","text":"cells SingleCellExperiment, SpatialExperiment list data.frames containing columns specifying imageID, cellType, x y spatial coordinates. r Radii evaluated pairwise relationships cells. parentDf data frame parentCombinations first cell type evaluated pairwise relationship. second cell type evaluated pairwise relationship. parent parent population cell type (must include cell type). image vector images subset results . NULL default images. inhom logical value indicating whether account inhomogeneity. edgeCorrect logical value indicating whether perform edge correction. window Type window data, either `square`, `convex` `concave`, passed makeWindow window.length tuning parameter controlling level concavity estimating concave windows. Passed makeWindow weightQuantile decimal value indicating quantile parent density used weight `` cells. includeZeroCells logical value indicating whether include cells zero counts pairwise association calculation. includeOriginal logical value return original L function values along kontextual values. spatialCoords columns contain x y spatial coordinates. cellType column contains cell types. imageID column contains image identifiers. cores Number cores parallel processing.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/Kontextual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","text":"kontextualResult object","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/Kontextual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation of pairwise cell relationships, conditional on a 3rd population. — Kontextual","text":"","code":"# Load data data(\"kerenSCE\")   CD4_Kontextual <- Kontextual(   cells = kerenSCE,   r = 50,   from = \"Macrophages\",   to = \"Keratin_Tumour\",   parent = c(\"Macrophages\", \"CD4_Cell\"),   image = \"6\" )   head(CD4_Kontextual) #>   imageID                        test  original kontextual  r weightQuantile #> 1       6 Macrophages__Keratin_Tumour -26.12355   1.917272 50            0.8 #>   inhom  edge includeZeroCells window window.length #> 1  TRUE FALSE             TRUE convex            NA"},{"path":"https://sydneybiox.github.io/Statial/reference/calcContamination.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the level of marker contamination of each cell — calcContamination","title":"Calculate the level of marker contamination of each cell — calcContamination","text":"Calculates contamination scores using random forest classification","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/calcContamination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the level of marker contamination of each cell — calcContamination","text":"","code":"calcContamination(   cells,   markers = NULL,   num.trees = 100,   verbose = FALSE,   missingReplacement = 0,   assay = \"intensities\",   cellType = \"cellType\",   redDimName = \"contaminations\" )"},{"path":"https://sydneybiox.github.io/Statial/reference/calcContamination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the level of marker contamination of each cell — calcContamination","text":"cells SingleCellExperiment SpatialExperiment cellType column well marker intensity information corresponding cell. markers vector markers proxy cell's state. NULL, markers used. num.trees Number trees used random forest classifier verbose logical indicating whether information final random forest model outputted. missingReplacement default value replace missing marker intensities classification. assay assay SingleCellExperiment object contains desired marker expressions. cellType name column colData stores cell types. redDimName redDimName store output sce.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/calcContamination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the level of marker contamination of each cell — calcContamination","text":"","code":"data(\"kerenSCE\")  singleCellDataDistancesContam <- calcContamination(   kerenSCE )"},{"path":"https://sydneybiox.github.io/Statial/reference/calcStateChanges.html","id":null,"dir":"Reference","previous_headings":"","what":"First layer wrapper function to build linear models measuring state changes — calcStateChanges","title":"First layer wrapper function to build linear models measuring state changes — calcStateChanges","text":"Builds linear models measuring marker based state changes cell type based proximity abundance another cell type. function provides option build robust mixed linear model variants","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/calcStateChanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First layer wrapper function to build linear models measuring state changes — calcStateChanges","text":"","code":"calcStateChanges(   cells,   marker = NULL,   from = NULL,   to = NULL,   image = NULL,   type = \"distances\",   assay = 1,   cellType = \"cellType\",   imageID = \"imageID\",   contamination = NULL,   minCells = 20,   verbose = FALSE,   timeout = 10,   nCores = 1 )"},{"path":"https://sydneybiox.github.io/Statial/reference/calcStateChanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First layer wrapper function to build linear models measuring state changes — calcStateChanges","text":"cells dataframe imageID, cellType, marker intensity column along covariates (e.g. distance abundance nearest cell type) model cell state changes marker vector markers proxy cell's state. NULL, markers  used. vector cell types use primary cells. NULL, cell types  used. vector cell types use interacting cells. NULL, cell types  used. image vector images filter . null images used. type type state change. value reduced dimensions. assay assay SingleCellExperiment object contains marker expressions. cellType column colData stores cell types. imageID column colData stores image ids. contamination TRUE, use contamination scores previously calculate. Otherwise name reduced dimension contains scores. minCells minimum number cells required fit model. verbose logical indicating messages printed timeout maximum time allowed build model. Setting may important building rlm mixed linear models nCores Number cores parallel processing","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/calcStateChanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First layer wrapper function to build linear models measuring state changes — calcStateChanges","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(\"kerenSCE\")  kerenSCE <- kerenSCE[, kerenSCE$imageID %in% c(5,6)]  kerenSCE <- getDistances(kerenSCE,   maxDist = 200, )  imageModels <- calcStateChanges(   cells = kerenSCE,   from = \"Macrophages\",   to = \"Tumour\" )"},{"path":"https://sydneybiox.github.io/Statial/reference/distanceCalculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pairwise distance between cell types — distanceCalculator","title":"Calculate pairwise distance between cell types — distanceCalculator","text":"Calculates euclidean distance cell nearest cell type single image","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/distanceCalculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pairwise distance between cell types — distanceCalculator","text":"","code":"distanceCalculator(data, maxDist = 200, distFun = \"min\")"},{"path":"https://sydneybiox.github.io/Statial/reference/distanceCalculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pairwise distance between cell types — distanceCalculator","text":"data single cell data interest maxDist Maximum distance pairs points counted close pairs. distFun merge duplicate entries.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getAbundances.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to calculate imhomogenous K function between a cell and surrounding\ntypes on each image — getAbundances","title":"Wrapper to calculate imhomogenous K function between a cell and surrounding\ntypes on each image — getAbundances","text":"Calculate imhomogenous K function (measure cell type abundance) cell cell types","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getAbundances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to calculate imhomogenous K function between a cell and surrounding\ntypes on each image — getAbundances","text":"","code":"getAbundances(   cells,   r = 200,   distFun = \"abundance\",   redDimName = \"abundances\",   cellType = \"cellType\",   imageID = \"imageID\",   spatialCoords = c(\"x\", \"y\"),   nCores = 1 )"},{"path":"https://sydneybiox.github.io/Statial/reference/getAbundances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to calculate imhomogenous K function between a cell and surrounding\ntypes on each image — getAbundances","text":"cells dataframe cellType column well x y spatial coordinates. dataframe must contain imageID column cellID (unique cell identifier's) column well r Radius include calculation pairwise abundance (K-function) cells (can numeric vector radii) distFun distance function use. redDimName Name reduced dimension store sce. cellType name column colData stores cell types. imageID name column colData Stores image ids. spatialCoords names columns colData store spatial coordinates. nCores Number cores parallel processing","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getAbundances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to calculate imhomogenous K function between a cell and surrounding\ntypes on each image — getAbundances","text":"","code":"library(dplyr) data(\"kerenSCE\")  singleCellDataCounts <- getAbundances(kerenSCE,   r = 200, )"},{"path":"https://sydneybiox.github.io/Statial/reference/getDistances.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to calculate pairwise distance between cell types by image — getDistances","title":"Wrapper to calculate pairwise distance between cell types by image — getDistances","text":"Calculates euclidean distance cell nearest cell type","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getDistances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to calculate pairwise distance between cell types by image — getDistances","text":"","code":"getDistances(   cells,   maxDist = NULL,   imageID = \"imageID\",   spatialCoords = c(\"x\", \"y\"),   cellType = \"cellType\",   redDimName = \"distances\",   distFun = \"min\",   nCores = 1 )"},{"path":"https://sydneybiox.github.io/Statial/reference/getDistances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to calculate pairwise distance between cell types by image — getDistances","text":"cells dataframe cellType column well x y spatial coordinates. dataframe must contain imageID column cellID (unique cell identifier's) column well maxDist maximum distance considered. imageID name colData column stores image ID. spatialCoords columns store spatial coordinates. cellType name colData column stores cell types. redDimName name reduced dimension store distances . distFun distance function use. Can min abundance. nCores Number cores parallel processing.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getDistances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to calculate pairwise distance between cell types by image — getDistances","text":"","code":"data(\"kerenSCE\")  kerenSCE <- getDistances(kerenSCE,   maxDist = 200 )"},{"path":"https://sydneybiox.github.io/Statial/reference/getMarkerMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the average expression for all markers for each cell type in each \nregion defined by lisaClust — getMarkerMeans","title":"Extract the average expression for all markers for each cell type in each \nregion defined by lisaClust — getMarkerMeans","text":"Takes SingleCellExperiment outputs dataframe convenient format  cross validation","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getMarkerMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the average expression for all markers for each cell type in each \nregion defined by lisaClust — getMarkerMeans","text":"","code":"getMarkerMeans(   data,   imageID = NULL,   cellType = NULL,   region = NULL,   markers = NULL,   assay = 1,   replaceVal = 0 )"},{"path":"https://sydneybiox.github.io/Statial/reference/getMarkerMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the average expression for all markers for each cell type in each \nregion defined by lisaClust — getMarkerMeans","text":"data SingleCellExperiment object intensities data assays slot regions information colData generated lisaClust. imageID colData column stores image IDs. cellType colData column store cell types. region colData column stores regions. markers string vector markers proxy cell's state. NULL, markers  used. assay assay want use expression data. replaceVal value replace missing values .","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/getMarkerMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the average expression for all markers for each cell type in each \nregion defined by lisaClust — getMarkerMeans","text":"","code":"data(kerenSCE)  kerenSCE <- kerenSCE[,kerenSCE$imageID %in% c(\"5\",\"6\")]  regionSCE <- lisaClust::lisaClust(kerenSCE, k = 5) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'.  lisaClustOutput <- getMarkerMeans(regionSCE)"},{"path":"https://sydneybiox.github.io/Statial/reference/isKontextual.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is a kontextualResult — isKontextual","title":"Test whether an object is a kontextualResult — isKontextual","text":"Test whether object kontextualResult","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/isKontextual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is a kontextualResult — isKontextual","text":"","code":"isKontextual(kontextualResult)"},{"path":"https://sydneybiox.github.io/Statial/reference/isKontextual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is a kontextualResult — isKontextual","text":"kontextualResult object test","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/isKontextual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether an object is a kontextualResult — isKontextual","text":"","code":"data = data.frame() if(!isKontextual(data)) print(\"Not a kontextualResult\") #> [1] \"Not a kontextualResult\""},{"path":"https://sydneybiox.github.io/Statial/reference/kerenKontextual.html","id":null,"dir":"Reference","previous_headings":"","what":"Kontextual results from kerenSCE — kerenKontextual","title":"Kontextual results from kerenSCE — kerenKontextual","text":"kontextual results data.frame created using Kontextual kerenSCE dataset.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kerenKontextual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kontextual results from kerenSCE — kerenKontextual","text":"","code":"data(kerenKontextual)"},{"path":"https://sydneybiox.github.io/Statial/reference/kerenKontextual.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kontextual results from kerenSCE — kerenKontextual","text":"kerenKontextual kontextual results object.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kerenSCE.html","id":null,"dir":"Reference","previous_headings":"","what":"MIBI-TOF Breast cancer intensities — kerenSCE","title":"MIBI-TOF Breast cancer intensities — kerenSCE","text":"single MIBI-TOF data breast cancer patient 6 Keren et al 2018 dataset.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kerenSCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MIBI-TOF Breast cancer intensities — kerenSCE","text":"","code":"data(kerenSCE)"},{"path":"https://sydneybiox.github.io/Statial/reference/kerenSCE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MIBI-TOF Breast cancer intensities — kerenSCE","text":"kerenSCE SingleCellExperiment object","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kerenSCE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MIBI-TOF Breast cancer intensities — kerenSCE","text":"Keren, L., Bosse, M., Marquez, D., Angoshtari, R., Jain, S., Varma, S., Yang, S. R., Kurian, ., Van Valen, D., West, R., Bendall, S. C., & Angelo, M. (2018). Structured Tumor-Immune Microenvironment Triple Negative Breast Cancer Revealed Multiplexed Ion Beam Imaging. Cell, 174(6), 1373-1387.e1319. ([DOI](https://doi.org/10.1016/j.cell.2018.08.039))","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of Kontextual over a range of radii. — kontextCurve","title":"Evaluation of Kontextual over a range of radii. — kontextCurve","text":"function obtains `Kondtional` values range radii, standard  deviations value can obtained using permutation significance  testing. obtain estimates standard deviations specify `se = TRUE`.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of Kontextual over a range of radii. — kontextCurve","text":"","code":"kontextCurve(   cells,   from,   to,   parent,   image = NULL,   rs = seq(10, 100, 10),   inhom = TRUE,   edge = FALSE,   se = FALSE,   nSim = 20,   cores = 1,   imageID = \"imageID\",   cellType = \"cellType\",   ... )"},{"path":"https://sydneybiox.github.io/Statial/reference/kontextCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of Kontextual over a range of radii. — kontextCurve","text":"cells single image SingleCellExperiment object first cell type evaluated pairwise relationship. second cell type evaluated pairwise relationship. parent parent population cell type (must include cell type). image vector images subset results . NULL default images. rs vector radii evaluate kontextual . inhom logical value indicating whether perform inhomogeneous L function. edge logical value indicating whether perform edge correction. se logical value indicate standard deviation kontextual calculated construct error bars. nSim Number randomisations perform using relabelKontextual, used calculated SE. cores Number cores parallel processing. imageID column colData stores image ids. cellType column colData stores cell types. ... arguments passed Kontextual.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextCurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluation of Kontextual over a range of radii. — kontextCurve","text":"data frame original L values Kontextual values evaluated range radii.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation of Kontextual over a range of radii. — kontextCurve","text":"","code":"data(\"kerenSCE\")  kerenImage6 = kerenSCE[, kerenSCE$imageID ==\"6\"]  rsDf <- kontextCurve(   cells = kerenSCE,   from = \"CD4_Cell\",   to = \"Keratin_Tumour\",   parent = c(\"CD4_Cell\", \"Macrophages\"),   rs = seq(10, 510, 100),   cores = 2 )"},{"path":"https://sydneybiox.github.io/Statial/reference/kontextPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","title":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","text":"function takes outputs rsCurve plots ggplot. standard deviation estimated rsCurve, confidence intervals constructed based standard deviation. confidence interval overlaps 0, relationship insignificant  radius.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","text":"","code":"kontextPlot(rsDf)"},{"path":"https://sydneybiox.github.io/Statial/reference/kontextPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","text":"rsDf data frame kontextCurve.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","text":"ggplotly object showing original kontextual L function  values range radii","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/kontextPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting the original and kontextual L values over a range of radii. — kontextPlot","text":"","code":"data(\"kerenSCE\")  kerenImage6 = kerenSCE[, kerenSCE$imageID ==\"6\"]  rsDf <- kontextCurve(   cells = kerenImage6,   from = \"p53\",   to = \"Immune\",   parent = c(\"p53\", \"Keratin+Tumour\"),   rs = seq(10, 510, 100),   cores = 2 )  kontextPlot(rsDf)"},{"path":"https://sydneybiox.github.io/Statial/reference/makeWindow.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a window for a PPP object — makeWindow","title":"Creates a window for a PPP object — makeWindow","text":"function creates window `spatstat::ppp` object, type  window can specified using `window` argument.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/makeWindow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a window for a PPP object — makeWindow","text":"","code":"makeWindow(data, window = \"square\", window.length = NULL)"},{"path":"https://sydneybiox.github.io/Statial/reference/makeWindow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a window for a PPP object — makeWindow","text":"data single image data frame SingleCellExperiment object PPP object. window shape window around regions, can `square`, `convex` `concave` window.length tuning parameter controlling level concavity estimating concave windows.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/makeWindow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a window for a PPP object — makeWindow","text":"Creates `owin` class, representing observation window image.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/makeWindow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a window for a PPP object — makeWindow","text":"","code":"data <- data.frame(x = rnorm(10), y = rnorm(10)) ow <- makeWindow(data, window = \"square\")  spatstat.geom::ppp(x = data$x, y = data$y, window = ow) #> Planar point pattern: 10 points #> window: rectangle = [-1.3187779, 0.7669156] x [-2.2423765, 2.051987] units"},{"path":"https://sydneybiox.github.io/Statial/reference/parentCombinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create all combinations of cell type relationships from a list of parents — parentCombinations","title":"Create all combinations of cell type relationships from a list of parents — parentCombinations","text":"function takes named vectors parent populations  dataset, creates data frame containing pairwise cell relationships, data frame can inputed `parentDf` argument `Kontextual`.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/parentCombinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create all combinations of cell type relationships from a list of parents — parentCombinations","text":"","code":"parentCombinations(all, ...)"},{"path":"https://sydneybiox.github.io/Statial/reference/parentCombinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create all combinations of cell type relationships from a list of parents — parentCombinations","text":"list `` cell types Kontextual evaluated ... Vectors parent population","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/parentCombinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create all combinations of cell type relationships from a list of parents — parentCombinations","text":"data frame containing pairwise cell relationships corresponding parent","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/parentCombinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create all combinations of cell type relationships from a list of parents — parentCombinations","text":"","code":"tcells <- c(\"CD4\", \"CD8\") tissue <- c(\"epithelial\", \"stromal\") allCells <- c(\"tumour\", tissue, tcells)  parentCombinations(all = allCells, tcells, tissue) #>          from         to       parent parent_name #> 1         CD4     tumour     CD4, CD8      tcells #> 2         CD4 epithelial     CD4, CD8      tcells #> 3         CD4    stromal     CD4, CD8      tcells #> 4         CD4        CD8     CD4, CD8      tcells #> 5         CD8     tumour     CD4, CD8      tcells #> 6         CD8 epithelial     CD4, CD8      tcells #> 7         CD8    stromal     CD4, CD8      tcells #> 8         CD8        CD4     CD4, CD8      tcells #> 9  epithelial     tumour epitheli....      tissue #> 10 epithelial    stromal epitheli....      tissue #> 11 epithelial        CD4 epitheli....      tissue #> 12 epithelial        CD8 epitheli....      tissue #> 13    stromal     tumour epitheli....      tissue #> 14    stromal epithelial epitheli....      tissue #> 15    stromal        CD4 epitheli....      tissue #> 16    stromal        CD8 epitheli....      tissue"},{"path":"https://sydneybiox.github.io/Statial/reference/plotStateChanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Cell-Cell Marker Relationships — plotStateChanges","title":"Visualise Cell-Cell Marker Relationships — plotStateChanges","text":"Helper functions visualise OLS model fits image based state models","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/plotStateChanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Cell-Cell Marker Relationships — plotStateChanges","text":"","code":"plotStateChanges(   cells,   image,   from,   to,   marker,   type = \"distances\",   assay = 1,   cellType = \"cellType\",   imageID = \"imageID\",   spatialCoords = c(\"x\", \"y\"),   size = 1,   shape = 19,   interactive = FALSE,   plotModelFit = FALSE,   method = \"lm\" )"},{"path":"https://sydneybiox.github.io/Statial/reference/plotStateChanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Cell-Cell Marker Relationships — plotStateChanges","text":"cells SingleCellExperiment distances already calculated. image image subset . character indicating name cell type (cellType column) whose cell state investigated character indicating name cell type (cellType column) may influencing cell state another cell type marker marker interest. type name reduced dimension use x-axis. assay Name assay stores marker expression. cellType name column colData stores cell types. imageID name column colData stores image ids. spatialCoords names columns colData store spatial coordinates. size Aesthetic numerical variable determining size displayed cells shape Aesthetic variable determining shape grouping displayed cells interactive Logical indicating output visualisation interactive (plotly) plotModelFit Logical indicating fitted values plotted actual intensities marker specified. default plot actual intensities method method build model . Currently option \"lm\". However, capabilities may expanded future","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/plotStateChanges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise Cell-Cell Marker Relationships — plotStateChanges","text":"image,","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/plotStateChanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Cell-Cell Marker Relationships — plotStateChanges","text":"","code":"library(dplyr) data(\"kerenSCE\")  kerenSCE <- getDistances(kerenSCE)  p <- plotStateChanges(   cells = kerenSCE,   type = \"distances\",   image = \"6\",   from = \"Keratin_Tumour\",   to = \"Macrophages\",   marker = \"p53\",   size = 1,   shape = 19,   interactive = FALSE,   plotModelFit = FALSE,   method = \"lm\")  p #> $image  #>  #> $scatter #> `geom_smooth()` using formula = 'y ~ x'  #>"},{"path":"https://sydneybiox.github.io/Statial/reference/prepMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Kontextual or state changes result to a matrix for classification — prepMatrix","title":"Convert Kontextual or state changes result to a matrix for classification — prepMatrix","text":"Convert Kontextual state changes result matrix classification","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/prepMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Kontextual or state changes result to a matrix for classification — prepMatrix","text":"","code":"prepMatrix(result, replaceVal = 0, column = NULL, test = NULL)"},{"path":"https://sydneybiox.github.io/Statial/reference/prepMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Kontextual or state changes result to a matrix for classification — prepMatrix","text":"result kontextual state changes result data.frame. replaceVal value NAs replaced . column column contains scores want select. test column containing column names expanded matrix.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/prepMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Kontextual or state changes result to a matrix for classification — prepMatrix","text":"","code":"data(\"kerenSCE\")   CD4_Kontextual <- Kontextual(   cells = kerenSCE,   r = 50,   from = \"Macrophages\",   to = \"Keratin_Tumour\",   parent = c(\"Macrophages\", \"CD4_Cell\"),   image = \"6\" )   kontextMat = prepMatrix(CD4_Kontextual)"},{"path":"https://sydneybiox.github.io/Statial/reference/relabelKontextual.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell permutation for Kontextual — relabelKontextual","title":"Cell permutation for Kontextual — relabelKontextual","text":"Function randomises specified cells image calculates `Kontextual` value. can used estimate null distribution,  parent cell population significance testing. function relabels specified cells within single image,  estimate null distribution cell population specified.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/relabelKontextual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell permutation for Kontextual — relabelKontextual","text":"","code":"relabelKontextual(   cells,   nSim = 1,   r,   from,   to,   parent,   image = NULL,   returnImages = FALSE,   inhom = TRUE,   edge = FALSE,   cores = 1,   spatialCoords = c(\"x\", \"y\"),   cellType = \"cellType\",   imageID = \"imageID\",   ... )  relabel(image, labels = NULL)"},{"path":"https://sydneybiox.github.io/Statial/reference/relabelKontextual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell permutation for Kontextual — relabelKontextual","text":"cells single image data frame SingleCellExperiment object nSim Number randomisations calculated. r Radius evaluated pairwise relationships cells. first cell type evaluated pairwise relationship. second cell type evaluated pairwise relationship. parent parent population cell type (must include cell type). image single image Single Cell Experiment object. returnImages logical value indicate whether function return randomised images along Kontextual values. inhom logical value indicating whether account inhomogeneity. edge logical value indicating whether perform edge correction. cores Number cores parallel processing. spatialCoords character vector containing names two spatial dimansions data. Defaults `c(\"x\", \"y\")`. cellType name cell type field data. Defualts \"cellType\". imageID name image ID field data. Defualts \"imageID\". ... arguments passed Kontextual labels vector CellTypes labels permuted NULL cells labels radomised.","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/relabelKontextual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell permutation for Kontextual — relabelKontextual","text":"data frame containing Kontextual value randomised image. `returnImages = TRUE` function return list Kontextual values randomised images. data frame containing pairwise cell relationships corresponding parent","code":""},{"path":"https://sydneybiox.github.io/Statial/reference/relabelKontextual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell permutation for Kontextual — relabelKontextual","text":"","code":"data(\"kerenSCE\")  kerenImage6 = kerenSCE[, kerenSCE$imageID ==\"6\"]  relabelResult <- relabelKontextual(   cells = kerenImage6,   nSim = 5,   r = 250,   from = \"CD4_Cell\",   to = \"Keratin_Tumour\",   parent = c(\"CD4_Cell\", \"Macrophages\"),   cores = 2 )  data(\"kerenSCE\")  kerenImage6 = kerenSCE[, kerenSCE$imageID ==\"6\"]  kerenImage6 <- kerenImage6 |>          SingleCellExperiment::colData() |>          data.frame()  # Permute CD8 T cells and T cell labels in the image relabeledImage <- relabel(kerenImage6, labels = c(\"p53\", \"Keratin+Tumour\")) plot(relabeledImage)"}]
