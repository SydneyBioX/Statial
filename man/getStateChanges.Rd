% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Statial.R
\name{getStateChanges}
\alias{getStateChanges}
\title{First layer wrapper function to build linear models measuring state changes}
\usage{
getStateChanges(
  singleCellData,
  markers,
  typeAll = c("dist"),
  covariates = NULL,
  method = "lm",
  isMixed = FALSE,
  randomIntercepts = c("imageID"),
  cellTypesToModel = NULL,
  verbose = FALSE,
  timeout = 10,
  nCores = 1
)
}
\arguments{
\item{singleCellData}{A dataframe with a imageID, cellType, and marker intensity column along
with covariates (e.g. distance or abundance of the nearest cell type) to
model cell state changes}

\item{markers}{A string list of markers that proxy a cell's state}

\item{typeAll}{A prefix that appears on the column names of all cell state modelling
covariates. The default value is "dist"}

\item{covariates}{A list of additional covariates to be included in the model being built.}

\item{method}{The type of linear model to be built. Current options include "lm", "rlm".}

\item{isMixed}{A logical indicating if a mixed effects model should be built - this will
build models for relationships on a global basis rather than on a image by
image level}

\item{randomIntercepts}{A string list of column names in the dataframe that should correspond to
the random intercepts}

\item{cellTypesToModel}{A string vector of the names of cell types to model cell state changes in.
The default argument is NULL which models are cell types}

\item{verbose}{A logical indicating if messages should be printed}

\item{timeout}{A maximum time allowed to build each model. Setting this may be important
when building rlm mixed linear models}

\item{nCores}{Number of cores for parallel processing}
}
\description{
Builds linear models measuring marker based state changes in a cell type
based of the proximity or abundance of another cell type. The function
provides the option to build robust and mixed linear model variants
}
\examples{
data("headSCE")
intensitiesData <- data.frame(t(
  SummarizedExperiment::assay(headSCE, "intensities")
))
spatialData <- data.frame(colData(headSCE))
markersToUse <- colnames(intensitiesData)
singleCellData <- cbind(
  spatialData[rownames(intensitiesData), ], intensitiesData
)
singleCellData <- singleCellData \%>\%
  mutate_at(markersToUse, function(x) ifelse(is.na(x), 0, x)) \%>\%
  mutate_if(is.factor, as.character)

singleCellDataDistances <- getDistances(singleCellData,
  nCores = 1,
  Rs = c(200),
  whichCellTypes = c("MC2", "SC7")
)

imageModels <- getStateChanges(
  singleCellData = singleCellDataDistances,
  markers = markersToUse,
  typeAll = c("dist200"),
  cellTypesToModel = "MC2",
  nCores = 1
)

}
